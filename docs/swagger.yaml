basePath: /api
definitions:
  auth.authResponse:
    properties:
      id:
        description: ID is user id (uuid)
        type: string
      refresh_token:
        description: RefreshToken user refresh token
        type: string
      token:
        description: Token user auth token (Bearer)
        type: string
    type: object
  auth.logInRequest:
    properties:
      name:
        description: Name username
        type: string
      password:
        description: Password user password
        type: string
    required:
    - name
    - password
    type: object
  auth.signUpRequest:
    properties:
      name:
        description: Name username, must be unique
        type: string
      password:
        description: Password user password, min 8 characters
        minLength: 8
        type: string
    required:
    - name
    - password
    type: object
  jsonerr.JSONError:
    properties:
      code:
        description: Code is desired http code for this error
        type: integer
      error:
        description: |-
          Err is a golang error returned by the app
          It is removed in production application (TBD)
        type: string
      message:
        description: Message is human friendly error message
        type: string
    type: object
  location.fetchRequest:
    properties:
      nicks:
        items:
          type: string
        type: array
      uuids:
        items:
          type: string
        type: array
    type: object
  location.updateLocationRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  location.userLocation:
    properties:
      id:
        type: string
      last_update:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      nick:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for WhereIsEveryone
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: WhereIsEveryone
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: logs in as an exiting users using login and passowrd
      parameters:
      - description: login details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/auth.logInRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "403":
          description: forbidden (invalid password)
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "404":
          description: user not exists
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: log in
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: creates a new user
      parameters:
      - description: sign up details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/auth.signUpRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "409":
          description: conflict (user with such a name exists)
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: sign up as a new user
      tags:
      - auth
  /location/fetch:
    post:
      consumes:
      - application/json
      description: fetches users location
      parameters:
      - description: arrays of ids or nicks
        in: body
        name: fetchLocation
        required: true
        schema:
          $ref: '#/definitions/location.fetchRequest'
      responses:
        "200":
          description: list of user
          schema:
            items:
              $ref: '#/definitions/location.userLocation'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      security:
      - Bearer: []
      summary: returns location of provided users
      tags:
      - location
  /location/update:
    post:
      consumes:
      - application/json
      description: updates user's location
      parameters:
      - description: location
        in: body
        name: locationUpdate
        required: true
        schema:
          $ref: '#/definitions/location.updateLocationRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      security:
      - Bearer: []
      summary: update user's location
      tags:
      - location
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
