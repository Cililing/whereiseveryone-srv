basePath: /api
definitions:
  auth.authResponse:
    properties:
      id:
        description: ID is user id (uuid)
        type: string
      refresh_token:
        description: RefreshToken user refresh token
        type: string
      token:
        description: Token user auth token (Bearer)
        type: string
    type: object
  auth.logInRequest:
    properties:
      password:
        description: Password user password
        type: string
      username:
        description: Username
        type: string
    required:
    - password
    - username
    type: object
  auth.signUpRequest:
    properties:
      password:
        description: Password user password, min 8 characters
        minLength: 8
        type: string
      username:
        description: Username username, must be unique
        type: string
    required:
    - password
    - username
    type: object
  jsonerr.JSONError:
    properties:
      code:
        description: Code is desired http code for this error
        type: integer
      error:
        description: |-
          Err is a golang error returned by the app
          It is removed in production application (TBD)
        type: string
      message:
        description: Message is human friendly error message
        type: string
    type: object
  me.friendDetails:
    properties:
      location:
        $ref: '#/definitions/me.locationDetails'
      status:
        type: string
      username:
        type: string
    type: object
  me.locationDetails:
    properties:
      accuracy:
        type: number
      altitude:
        type: number
      bearing:
        type: number
      last_update:
        description: LastUpdate in UTC time
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  me.observeRequest:
    properties:
      username:
        type: string
    type: object
  me.updateLocationRequest:
    properties:
      accuracy:
        type: number
      altitude:
        type: number
      bearing:
        type: number
      last_update:
        description: LastUpdate in UTC time
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  me.updateStatusRequest:
    properties:
      status:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for WhereIsEveryone
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: WhereIsEveryone
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: logs in as an exiting users using login and passowrd
      parameters:
      - description: login details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/auth.logInRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "403":
          description: forbidden (invalid password)
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "404":
          description: user not exists
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: log in
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: creates a new user
      parameters:
      - description: sign up details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/auth.signUpRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "409":
          description: conflict (user with such a name exists)
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: sign up as a new user
      tags:
      - auth
  /me/friends:
    get:
      description: returns all details about observed users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/me.friendDetails'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: get friends details
      tags:
      - me
  /me/observe:
    delete:
      consumes:
      - application/json
      description: stop observing the user, if user is not observed, nothing happen
      parameters:
      - description: user to unobserve
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/me.observeRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "404":
          description: requested user not exists
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: unobserve the user
      tags:
      - me
    post:
      consumes:
      - application/json
      description: start observing the user, the second user must observe requester
        too to get his details
      parameters:
      - description: user to observe
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/me.observeRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "404":
          description: requested user not exists
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: observe the user
      tags:
      - me
  /me/status:
    put:
      consumes:
      - application/json
      description: updates logged user status (text status)
      parameters:
      - description: update status object
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/me.updateStatusRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: update status
      tags:
      - me
  /me/updateLocation:
    put:
      consumes:
      - application/json
      description: update logged user location
      parameters:
      - description: update location object
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/me.updateLocationRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/jsonerr.JSONError'
      summary: update location
      tags:
      - me
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
