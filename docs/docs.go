// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "logs in as an exiting users using login and passowrd",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "log in",
                "parameters": [
                    {
                        "description": "login details",
                        "name": "userDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.logInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.authResponse"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "403": {
                        "description": "forbidden (invalid password)",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "404": {
                        "description": "user not exists",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "creates a new user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "sign up as a new user",
                "parameters": [
                    {
                        "description": "sign up details",
                        "name": "userDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.signUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.authResponse"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "409": {
                        "description": "conflict (user with such a name exists)",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        },
        "/me/friends": {
            "get": {
                "description": "returns all details about observed users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "get friends details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/me.friendDetails"
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        },
        "/me/observe": {
            "post": {
                "description": "start observing the user, the second user must observe requester too to get his details",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "observe the user",
                "parameters": [
                    {
                        "description": "user to observe",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/me.observeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "404": {
                        "description": "requested user not exists",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            },
            "delete": {
                "description": "stop observing the user, if user is not observed, nothing happen",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "unobserve the user",
                "parameters": [
                    {
                        "description": "user to unobserve",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/me.observeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "404": {
                        "description": "requested user not exists",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        },
        "/me/status": {
            "put": {
                "description": "updates logged user status (text status)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "update status",
                "parameters": [
                    {
                        "description": "update status object",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/me.updateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        },
        "/me/updateLocation": {
            "put": {
                "description": "update logged user location",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "update location",
                "parameters": [
                    {
                        "description": "update location object",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/me.updateLocationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonerr.JSONError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.authResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is user id (uuid)",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "RefreshToken user refresh token",
                    "type": "string"
                },
                "token": {
                    "description": "Token user auth token (Bearer)",
                    "type": "string"
                }
            }
        },
        "auth.logInRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password user password",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "auth.signUpRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password user password, min 8 characters",
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "description": "Username username, must be unique",
                    "type": "string"
                }
            }
        },
        "jsonerr.JSONError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is desired http code for this error",
                    "type": "integer"
                },
                "error": {
                    "description": "Err is a golang error returned by the app\nIt is removed in production application (TBD)",
                    "type": "string"
                },
                "message": {
                    "description": "Message is human friendly error message",
                    "type": "string"
                }
            }
        },
        "me.friendDetails": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/me.locationDetails"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "me.locationDetails": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "altitude": {
                    "type": "number"
                },
                "bearing": {
                    "type": "number"
                },
                "last_update": {
                    "description": "LastUpdate in UTC time",
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "me.observeRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "me.updateLocationRequest": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "altitude": {
                    "type": "number"
                },
                "bearing": {
                    "type": "number"
                },
                "last_update": {
                    "description": "LastUpdate in UTC time",
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "me.updateStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "WhereIsEveryone",
	Description:      "This is a sample server for WhereIsEveryone",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
